AWSTemplateFormatVersion: "2010-09-09"
Description: "Provisions the CI/CD pipeline using EventBridge, CodeDeploy, CodePipeline, and CodeBuild."

Parameters:
  ECSStackName:
    Type: String
    Default: "CICD-ECS-STK"
    Description: "Name of the ECS stack to import values from"

  BaseInfraStackName:
    Type: String
    Default: "CICD-BASE-STK"
    Description: "Name of the Base infra. stack to import values from"

Resources:
  # -----------------------------
  # IAM Roles
  # -----------------------------
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codedeploy.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS"

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "ecr:*"
                  - "ecs:*"
                  - "codedeploy:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: !ImportValue
                  Fn::Sub: "${ECSStackName}-TaskExecRoleArn"

  # -----------------------------
  # CodeDeploy Application + DG
  # -----------------------------
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub "${AWS::StackName}-App"
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub "${AWS::StackName}-DG"
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      ECSServices:
        - ClusterName: !ImportValue
            Fn::Sub: "${ECSStackName}-ClusterName"
          ServiceName: !ImportValue
            Fn::Sub: "${ECSStackName}-ServiceName"
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !ImportValue
                  Fn::Sub: "${ECSStackName}-TGBlueNewName"
              - Name: !ImportValue
                  Fn::Sub: "${ECSStackName}-TGGreenNewName"
            ProdTrafficRoute:
              ListenerArns:
                - !ImportValue
                  Fn::Sub: "${ECSStackName}-ListenerArn"

  # -----------------------------
  # EventBridge Rule
  # -----------------------------
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"

  EventBridgePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EventBridgeStartPipelinePolicy
      Roles: [!Ref EventBridgeRole]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "codepipeline:StartPipelineExecution"
            Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"

  ECRTriggerEventRule:
    Type: AWS::Events::Rule
    DependsOn:
      - CodePipeline
      - EventBridgePolicy
    Properties:
      EventPattern:
        source: ["aws.ecr"]
        detail-type: ["ECR Image Action"]
        detail:
          action-type: ["PUSH"]
          result: ["SUCCESS"]
          repository-name:
            - !ImportValue
              Fn::Sub: "${BaseInfraStackName}-ECRRepositoryName"
          image-tag:
            - latest
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
          Id: "CodePipelineTarget"
          RoleArn: !GetAtt EventBridgeRole.Arn

  # -----------------------------
  # CodePipeline
  # -----------------------------
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AWS::StackName}-Pipeline"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !ImportValue
          Fn::Sub: ${BaseInfraStackName}-ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: S3-Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: S3
              Configuration:
                S3Bucket: !ImportValue
                  Fn::Sub: ${BaseInfraStackName}-ArtifactBucket
                S3ObjectKey: "deployment-files.zip"
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ECS-Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CodeDeployToECS
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: SourceArtifact
                TaskDefinitionTemplatePath: "taskdef.json"
                AppSpecTemplateArtifact: SourceArtifact
                AppSpecTemplatePath: "appspec.yml"
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
# -----------------------------
# Outputs
# -----------------------------
Outputs:
  CodePipelineName:
    Description: CodePipeline Name
    Value: !Ref CodePipeline
    Export:
      Name: !Sub "${AWS::StackName}-PipelineName"
  CodeDeployApplicationName:
    Description: CodeDeploy Application Name
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub "${AWS::StackName}-CodeDeployApp"
