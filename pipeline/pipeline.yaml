AWSTemplateFormatVersion: "2010-09-09"
Description: "Provisions the CI/CD pipeline using EventBridge, CodeDeploy, CodePipeline, and CodeBuild."

Parameters:
  ECSStackName:
    Type: String
    Default: "CICD-ECS-CLUSTER-STACK"
    Description: "Name of the ECS stack to import values from"

Resources:
  # -----------------------------
  # IAM Roles
  # -----------------------------
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codedeploy.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS"

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "ecr:DescribeImages"
                  - "codedeploy:*"
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:DescribeTaskDefinition"
                  - "ecs:RegisterTaskDefinition"
                  - "iam:PassRole"
                  - "s3:*"
                Resource: "*"

  # -----------------------------
  # CodeDeploy Application + DG
  # -----------------------------
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub "${AWS::StackName}-App"
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub "${AWS::StackName}-DG"
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      ECSServices:
        - ClusterName: !ImportValue
            Fn::Sub: "${ECSStackName}-ClusterName"
          ServiceName: !ImportValue
            Fn::Sub: "${ECSStackName}-ServiceName"
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !ImportValue
                  Fn::Sub: "${ECSStackName}-TGBlueName"
              - Name: !ImportValue
                  Fn::Sub: "${ECSStackName}-TGGreenName"
            ProdTrafficRoute:
              ListenerArns:
                - !ImportValue
                  Fn::Sub: "${ECSStackName}-ListenerArn"

  # -----------------------------
  # Artifact Bucket
  # -----------------------------
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  # -----------------------------
  # CodeBuild Project (ConfigGenerator)
  # -----------------------------
  ConfigGeneratorProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-ConfigGenerator"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        Type: LINUX_CONTAINER
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 5
      Description: "Generates appspec.yml and taskdef.json for ECS deployments"
      EnvironmentVariables:
        - Name: ECS_TASK_DEFINITION
          Value: !Sub "${ECSStackName}-task"
        - Name: CONTAINER_NAME
          Value: "awslab-app-container"
      # Inline buildspec
      BuildSpec: |
        version: 0.2
        phases:
          build:
            commands:
              - echo "Generating deployment files..."
              - IMAGE_URI=$(cat imagedefinitions.json | jq -r '.[0].imageUri')
              - |
                cat > appspec.yml <<EOF
                version: 0.0
                Resources:
                  - TargetService:
                      Type: AWS::ECS::Service
                      Properties:
                        TaskDefinition: ${ECS_TASK_DEFINITION}
                        LoadBalancerInfo:
                          ContainerName: ${CONTAINER_NAME}
                          ContainerPort: 8080
                EOF
              - |
                cat > taskdef.json <<EOF
                {
                  "family": "${ECS_TASK_DEFINITION}",
                  "networkMode": "awsvpc",
                  "requiresCompatibilities": ["FARGATE"],
                  "cpu": "256",
                  "memory": "512",
                  "containerDefinitions": [
                    {
                      "name": "${CONTAINER_NAME}",
                      "image": "$IMAGE_URI",
                      "essential": true,
                      "portMappings": [
                        {
                          "containerPort": 8080,
                          "protocol": "tcp"
                        }
                      ]
                    }
                  ]
                }
                EOF
              - echo "Files generated:"
              - ls -la
        artifacts:
          files:
            - appspec.yml
            - taskdef.json
            - imagedefinitions.json

  # -----------------------------
  # EventBridge Rule
  # -----------------------------
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"

  EventBridgePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EventBridgeStartPipelinePolicy
      Roles: [!Ref EventBridgeRole]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "codepipeline:StartPipelineExecution"
            Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"

  ECRTriggerEventRule:
    Type: AWS::Events::Rule
    DependsOn:
      - CodePipeline
      - EventBridgePolicy
    Properties:
      EventPattern:
        source: ["aws.ecr"]
        detail-type: ["ECR Image Action"]
        detail:
          action-type: ["PUSH"]
          result: ["SUCCESS"]
          repository-name:
            - !ImportValue
              Fn::Sub: "${ECSStackName}-ECRRepositoryName"
          image-tag:
            - latest
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
          Id: "CodePipelineTarget"
          RoleArn: !GetAtt EventBridgeRole.Arn

  # -----------------------------
  # CodePipeline
  # -----------------------------
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: ArtifactBucket
    Properties:
      Name: !Sub "${AWS::StackName}-Pipeline"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: ECR-Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: ECR
              Configuration:
                RepositoryName: !ImportValue
                  Fn::Sub: "${ECSStackName}-ECRRepositoryName"
                ImageTag: "latest"
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Generate-Config
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref ConfigGeneratorProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: ConfigArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ECS-Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CodeDeployToECS
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: ConfigArtifact
                TaskDefinitionTemplatePath: "taskdef.json"
                AppSpecTemplateArtifact: ConfigArtifact
                AppSpecTemplatePath: "appspec.yml"
              InputArtifacts:
                - Name: ConfigArtifact
              RunOrder: 1

# -----------------------------
# Outputs
# -----------------------------
Outputs:
  CodePipelineName:
    Description: CodePipeline Name
    Value: !Ref CodePipeline
    Export:
      Name: !Sub "${AWS::StackName}-PipelineName"
  CodeDeployApplicationName:
    Description: CodeDeploy Application Name
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub "${AWS::StackName}-CodeDeployApp"
  ArtifactBucketName:
    Description: S3 Artifact Bucket Name
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub "${AWS::StackName}-ArtifactBucket"
