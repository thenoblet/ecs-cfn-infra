AWSTemplateFormatVersion: "2010-09-09"
Description: "Provisions the CI/CD pipeline using: EventBridge, CodeDeploy, and CodePipeline."

Parameters:
  ECSStackName:
    Type: String
    Default: "CICD-ECS-CLUSTER-STACK"
    Description: "Name of the ECS stack to import values from"

Resources:
  # IAM Roles for Pipeline and CodeDeploy
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codedeploy.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS"

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "ecr:DescribeImages"
                  - "codedeploy:*"
                Resource: "*"

  # CodeDeploy Application and Deployment Group
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub "${AWS::StackName}-App"
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub "${AWS::StackName}-DG"
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      ECSServices:
        - ClusterName: !ImportValue
            Fn::Sub: "${ECSStackName}-ClusterName"
          ServiceName: !ImportValue
            Fn::Sub: "${ECSStackName}-ServiceName"
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !ImportValue
                  Fn::Sub: "${ECSStackName}-TGBlueName"
              - Name: !ImportValue
                  Fn::Sub: "${ECSStackName}-TGGreenName"
            ProdTrafficRoute:
              ListenerArns:
                - !ImportValue
                  Fn::Sub: "${ECSStackName}-ListenerArn"
            TestTrafficRoute:
            ListenerArns:
              - !ImportValue
                Fn::Sub: "${ECSStackName}-TestListenerArn"

  # S3 bucket for pipeline artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  # EventBridge Rule to trigger pipeline
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-EventBridgeRole"

  EventBridgePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EventBridgeStartPipelinePolicy
      Roles: [!Ref EventBridgeRole]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "codepipeline:StartPipelineExecution"
            Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"

  ECRTriggerEventRule:
    Type: AWS::Events::Rule
    DependsOn:
      - CodePipeline
      - EventBridgePolicy
    Properties:
      EventPattern:
        source: ["aws.ecr"]
        detail-type: ["ECR Image Action"]
        detail:
          action-type: ["PUSH"]
          result: ["SUCCESS"]
          repository-name:
            - !ImportValue
              Fn::Sub: "${ECSStackName}-ECRRepositoryName"
          image-tag:
            - latest
            - "*"
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
          Id: "CodePipelineTarget"
          RoleArn: !GetAtt EventBridgeRole.Arn

  # The Pipeline itself
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AWS::StackName}-Pipeline"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: ECR-Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: ECR
              Configuration:
                RepositoryName: !ImportValue
                  Fn::Sub: "${ECSStackName}-ECRRepositoryName"
                ImageTag: "latest"
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ECS-Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CodeDeployToECS
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: "SourceArtifact"
                AppSpecTemplateArtifact: "SourceArtifact"
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

Outputs:
  CodePipelineName:
    Description: CodePipeline Name
    Value: !Ref CodePipeline
    Export:
      Name: !Sub "${AWS::StackName}-PipelineName"
  CodeDeployApplicationName:
    Description: CodeDeploy Application Name
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub "${AWS::StackName}-CodeDeployApp"
  ArtifactBucketName:
    Description: S3 Artifact Bucket Name
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub "${AWS::StackName}-ArtifactBucket"
