AWSTemplateFormatVersion: "2010-09-09"
Description: "Provisions the ECS Cluster, ALB, ECR Repository, OIDC Role, and ECS Service."

Parameters:
  VpcStackName:
    Type: String
    Default: "CICD-VPC-STACK"
    Description: "Name of the VPC stack to import values from"
  SecurityStackName:
    Type: String
    Default: "CICD-SECURITY-STACK"
    Description: "Name of the Security Groups stack to import values from"
  GitHubOrg:
    Type: String
    Default: "thenoblet"
    Description: Your GitHub organization/username.
  GitHubRepo:
    Type: String
    Default: "awslab"
    Description: Your GitHub repository name.

Resources:
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "cicd-ecr-repo"

  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        # Root CA thumbprint for GitHub's OIDC
        - 6938fd4d98bab03faadb97b34396831e3780aea1

  # IAM Role for GitHub Actions (OIDC)
  GitHubOidcRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GitHubOidcRoleForEcr
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref GitHubOidcProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringLike:
                "token.actions.githubusercontent.com:sub": !Sub "repo:${GitHubOrg}/${GitHubRepo}:*"
      Policies:
        - PolicyName: ECRPushPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:PutImage"
                Resource: !GetAtt ECRRepository.Arn

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-Cluster"

  # Task Execution Role for Fargate
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  # ALB and Target Groups
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Split
        - ","
        - !ImportValue
          Fn::Sub: "${VpcStackName}-PublicSubnetIds"
      SecurityGroups:
        - !ImportValue
          Fn::Sub: "${SecurityStackName}-ALBSG-ID"
      Scheme: internet-facing

  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-TG-Blue"
      VpcId: !ImportValue
        Fn::Sub: "${VpcStackName}-VPCId"
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP

  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-TG-Green"
      VpcId: !ImportValue
        Fn::Sub: "${VpcStackName}-VPCId"
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroupBlue
                Weight: 100
              - TargetGroupArn: !Ref TargetGroupGreen
                Weight: 0

  ALBTestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupGreen

  # ECS Task Definition and Service
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-task"
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities: ["FARGATE"]
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: "awslab-app-container"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - ALBTestListener
    Properties:
      ServiceName: !Sub "${AWS::StackName}-service"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split
            - ","
            - !ImportValue
              Fn::Sub: "${VpcStackName}-PrivateSubnetIds"
          SecurityGroups:
            - !ImportValue
              Fn::Sub: "${SecurityStackName}-ECSSG-ID"
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroupBlue
          ContainerName: "awslab-app-container"
          ContainerPort: 8080

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"
  ECSServiceName:
    Description: ECS Service Name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub "${AWS::StackName}-ServiceName"
  ALBListenerArn:
    Description: ALB Listener ARN
    Value: !Ref ALBListener
    Export:
      Name: !Sub "${AWS::StackName}-ListenerArn"
  ALBTestListenerArn:
    Description: ALB Test Listener ARN for Blue/Green Deployments
    Value: !Ref ALBTestListener
    Export:
      Name: !Sub "${AWS::StackName}-TestListenerArn"
  TargetGroupBlueName:
    Description: Blue Target Group Name
    Value: !Ref TargetGroupBlue
    Export:
      Name: !Sub "${AWS::StackName}-TGBlueName"
  TargetGroupGreenName:
    Description: Green Target Group Name
    Value: !Ref TargetGroupGreen
    Export:
      Name: !Sub "${AWS::StackName}-TGGreenName"
  ALBEndpoint:
    Description: ALB DNS Endpoint
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ALBEndpoint"
  ECRRepositoryUri:
    Description: ECR Repository URI
    Value: !GetAtt ECRRepository.RepositoryUri
    Export:
      Name: !Sub "${AWS::StackName}-ECRRepositoryUri"
  ECRRepositoryName:
    Description: ECR Repository Name
    Value: !Ref ECRRepository
    Export:
      Name: !Sub "${AWS::StackName}-ECRRepositoryName"
  GitHubOidcRoleArn:
    Description: GitHub OIDC Role ARN
    Value: !GetAtt GitHubOidcRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GitHubOidcRoleArn"
